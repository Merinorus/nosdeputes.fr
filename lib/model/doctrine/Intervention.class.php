<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Intervention extends BaseIntervention
{

  private static $seances = null;
  private static $personnalites = null;
  public $perso = null;

  public function getLink() {
    sfProjectConfiguration::getActive()->loadHelpers(array('Url'));
    return url_for('@interventions_seance?seance='.$this->getSeance()->id).'#inter_'.$this->getMd5();
  }
  public function getLinkSource() {
    return $this->source;
  }
  public function getPersonne() {
    return $this->getNomAndFonction();
  }

  public function getFullDate() {
    $datetime = strtotime($this->date);
    $moment = $this->Seance->moment;
    $heuretime = "10:00";
    if (preg_match('/\d:\d/', $moment))
      $heuretime = $moment;
    else if (preg_match('/^(\d)/', $moment, $match))
      $heuretime = sprintf('%02d', 10+4*($match[1]-1)).':00';
    $datetime += strtotime($heuretime) - strtotime('now');
    $timestamp = $this->timestamp;
    $len = strlen($timestamp);
    if ($len > 6)
      $timestamp = substr($timestamp, $len-6, 6) + 0;
    $datetime += $timestamp;
    return date('Y-m-d H:i:s', $datetime);
  }

  public function __toString() {
    if (strlen($this->intervention) > 1024)
      return substr($this->intervention, 0, 512).'...';
    return $this->intervention;
  }

  public function getTitre() {
    if ($this->type === 'question')
      $titre = 'Question orale du ';
    else {
      if ($this->type === 'commission') {
        if ($orga = $this->getOrganisme())
          $titre = $orga." - Intervention";
        else $titre = 'Intervention en commission';
      } else $titre = 'Intervention en hémicycle';
      $titre .= ' le ';
    }
    $titre .= myTools::displayShortDate($this->date);
    if ($this->type != 'commission')
      $titre .= ' : '.ucfirst($this->getDossier());
    return $titre;
  }

  public function getDossier() {
    if ($this->type === 'question' && $section = $this->Section)
      return $section->getTitre();
    if ($this->type === 'loi' && $section = $this->Section->Section)
      return $section->getTitreComplet();
    return "";
  }

  public function getOrganisme() {
    if ($this->type === 'commission' && $seance = $this->Seance)
      if ($orga = $seance->Organisme)
        return $orga->nom;
    return "";
  }

  public function setSeance($type, $date, $heure, $session, $commissiontxt = null) {
    $seancetype = "hemicycle";
    if ($type == "commission") {
        $seancetype = "commission";
    }
    $this->setType($type);
    if (is_array(self::$seances) && isset(self::$seances[$seancetype.$date.$heure.$session.$commissiontxt]))
	  return $this->_set('seance_id', self::$seances[$seancetype.$date.$heure.$session.$commissiontxt]);
	self::$seances = array();
    $seance = Doctrine::getTable('Seance')->findOneOrCreateIt($seancetype, $date, $heure, $session, $commissiontxt);
    $id = $this->_set('seance_id', $seance->id);
    self::$seances[$seancetype.$date.$heure.$session.$commissiontxt] = $seance->id;
    return $id;
  }

  public function setPersonnaliteByNom($nom, $fonction = null)
  {
    $nom = html_entity_decode($nom, ENT_COMPAT, 'UTF-8');
    $fonction = html_entity_decode($fonction, ENT_COMPAT, 'UTF-8');
    $acc = html_entity_decode("&eacute;", ENT_COMPAT, 'UTF-8');
    $this->setFonction($fonction);
    if (is_array(self::$personnalites)) {
      if (isset(self::$personnalites[$nom.$fonction])) {
	if (isset(self::$personnalites[$nom.$fonction]['personnalite'])) {
	  return $this->setPersonnalite(self::$personnalites[$nom.$fonction]['personnalite']);
	}else{
	  return $this->setParlementaire(self::$personnalites[$nom.$fonction]['parlementaire']);
	}
      }
    }else{
      self::$personnalites = array();
    }
    if (!preg_match('/d([eé]|'.$acc.')put([eé]|'.$acc.')|ministre|secr([eé]|'.$acc.')taire [^t]+tat|commissaire|garde des sceaux/i', $fonction)) {
      $personne = Doctrine::getTable('Parlementaire')->findOneByNom($nom);
      if (!$personne && ($this->type != "commission" || $fonction == null || preg_match('/(s([eé]|'.$acc.')nateur|s([eé]|'.$acc.')natrice|rapporteur|pr([eé]|'.$acc.')sidente?$|pr([eé]|'.$acc.')sidente? de la commission)/i', $fonction))) {
	$personne = Doctrine::getTable('Parlementaire')->similarToCheckPrenom($nom);
      }
      if ($personne) {
        self::$personnalites[$nom.preg_replace('/d([eé]|'.$acc.')put([eé]|'.$acc.')e?[^,]*, ?/i', '', $fonction)] = array('parlementaire' => $personne);
	self::$personnalites[$nom.$fonction] = array('parlementaire' => $personne);
	return $this->setParlementaire($personne);
      }
    }
    $personne = Doctrine::getTable('Personnalite')->findOneByNom($nom);
    if (!$personne) {
      $personne = new Personnalite();
      $personne->setNom($nom);
      $personne->save();
    }
    if ($personne) {
      self::$personnalites[$nom.preg_replace('/d([eé]|'.$acc.')put([eé]|'.$acc.')e?[^,]*, ?/i', '', $fonction)] = array('personnalite' => $personne);
      self::$personnalites[$nom.$fonction] = array('personnalite' => $personne);
      return $this->setPersonnalite($personne);
    }
  }
  public function setParlementaire($parlementaire, $from_db = null) {
    if (isset($parlementaire->id)) {
      $this->_set('parlementaire_id', $parlementaire->id);
      $this->_set('personnalite_id', null);
      if (!$from_db)
        $this->getSeance()->addPresence($parlementaire, 'intervention', $this->source);
    }
  }
  public function setPersonnalite($personne) {
    if (isset($personne->id)) {
      $this->_set('parlementaire_id', null);
      $this->_set('personnalite_id', $personne->id);
    }
  }

  public function hasIntervenant() {
    if ($this->parlementaire_id) {
      return true;
    }
    if ($this->personnalite_id) {
      return true;
    }
    return false;
  }

  public function isDidascalie() {
    if ($this->hasIntervenant())
      return false;
    similar_text(strip_tags($this->intervention), $this->Section->getTitreComplet(), $sim);
    if ($sim > 70)
      return false;
    similar_text(strip_tags($this->intervention), $this->Section->getTitre(), $sim);
    if ($sim > 70)
      return false;
    return true;
  }

  public function isInterventionOrDidascalie() {
    if ($this->hasIntervenant()) {
      return true;
    }
    if($this->isDidascalie()) {
      return true;
    }
    return false;
  }

  public function getIntervenant(&$parlementaires = null, &$personnalites = null) {
    if (is_null($this->perso)) {
      if ($this->parlementaire_id) {
	if ($parlementaires) {
	  $this->perso = $parlementaires[$this->parlementaire_id];
	} else {
	  $this->perso = $this->getParlementaire();
	}
      }
      if ($this->personnalite_id) {
	if ($personnalites) {
	  $this->perso = $personnalites[$this->personnalite_id];
	} else {
	  $this->perso = $this->getPersonnalite();
	}
      }
    }
    return $this->perso;
  }

  public function getNomAndFonction() {
    $res = null;
    if ($this->hasIntervenant()) {
      $res = $this->getIntervenant()->getNom();
      if ($this->getFonction())
	$res .= ', '.$this->getFonction();
    }
    return $res;
  }

  private static function prepareLois($tlois) {
    $tlois = preg_replace('/[^,\d\-]+/', '', $tlois);
    $tlois = preg_replace('/\s+,/', ',', $tlois);
    $tlois = preg_replace('/,\s+/', ',', $tlois);
    return explode(',', $tlois);
  }

  public function updateTagLois($strlois) {
    $lois = self::prepareLois($strlois);
    $this->addTagLois($lois);
    $this->tagSectionLois($lois);
  }

  public function addTagLois($lois) {
    $loisstring = "";
    foreach($lois as $loi) if ($loi) {
      $tag = 'loi:numero='.$loi;
      $this->addTag($tag);
      if ($loisstring == "") $loisstring = "t.numero = $loi";
      else $loisstring .= " OR t.numero = $loi";
    }
    return $loisstring;
  }

  public function tagSectionLois($lois) {
     if ($this->Section && $this->section_id != 1) {
        $titre = $this->Section->Section->getTitre();
        if (!(preg_match('/(conf.*rence des pr.*sidents|^(d.*p.*t|transmission) d(e |.une? |.)(documents?|rapport|proposition|avis|projet)|cloture|ouverture|question|ordre du jour|calendrier|élection.*nouveau|démission|reprise|examen simplifié|cessation.*mandat|proclamation|souhaits|application de l.article|renvoi pour avis|nomination (de|d.une?) (membre|rapporteur)s?|rappel au règlement|^communication|^candidature|examen.*pétition)/i', $titre))) {
          foreach($lois as $loi) {
            $tag = 'loi:numero='.$loi;
            $this->Section->addTag($tag);
            if ($this->Section->section_id && $this->Section->Section->id && $this->Section->section_id != $this->section_id)
              $this->Section->Section->addTag($tag);
          }
        }
      }
  }

  public function setContexte($contexte, $date = null, $timestamp = null, $tlois = null, $debug = 0) {
    $lois = self::prepareLois($tlois);
    $loisstring = $this->addTagLois($lois);
    if ($date && preg_match("/^(\d{4}-\d\d-\d\d)/", $date, $annee)) {
      if (!preg_match("/^".$annee[1]."\d\d:\d\d$/", $date))
        $date = $annee[1]."00:00";
    } else print "WARNING : Intervention $this->id has incorrect date : $date";

    if (!isset($lois[0]) || !$lois[0]) {
      $this->setSection(Doctrine::getTable('Section')->findOneByContexteOrCreateIt($contexte, $date, $timestamp));
      return $debug;
    }
    $urls = Doctrine_Query::create()
        ->select('distinct(t.id_dossier_institution)')
        ->from('Texteloi t')
        ->where('t.type = ? OR t.type = ? OR t.type = ? OR t.type = ?', array("Proposition de loi", "Proposition de résolution", "Projet de loi", "Texte de la commission"))
        ->andWhere($loisstring)
        ->fetchArray();
    $ct = count($urls);
    if ($ct == 0) $urls = Doctrine_Query::create()
        ->select('distinct(t.id_dossier_institution)')
        ->from('Texteloi t')
        ->where($loisstring)
        ->fetchArray();
    $ct = count($urls);
    if ($ct > 1) {
        $this->setSection(Doctrine::getTable('Section')->findOneByContexteOrCreateIt($contexte, $date, $timestamp));
        if ($debug) {
          print "WARNING : Intervention $this->id has tags lois corresponding to multiple id_dossier_institutions : ";
          foreach ($urls as $url)
            print $url['distinct']." ; ";
          print " => Saving to section $this->Section->id\n";
          $debug = 0;
        }
        return $debug;
    }
    if ($ct == 0) $this->setSection(Doctrine::getTable('Section')->findOneByContexteOrCreateIt($contexte, $date, $timestamp));
    else if ($ct == 1) {
        $section1 = Doctrine::getTable('Section')->findOneByContexte($contexte);
        $section2 = Doctrine::getTable('Section')->findOneByIdDossierInstitution($urls[0]['distinct']);
        if ($section2) {
          if (!$section1)
            $this->setSection(Doctrine::getTable('Section')->findOneByContexteOrCreateIt(str_replace(trim(preg_replace('/^([^>]+)(>.*)?$/', '\\1', $contexte)), $section2->titre, $contexte), $date, $timestamp));
          else if ($section1->section_id == $section2->id)
            $this->setSection(Doctrine::getTable('Section')->findOneByContexteOrCreateIt($section1->titre_complet, $date, $timestamp));
          else {
            $this->setSection(Doctrine::getTable('Section')->findOneByContexteOrCreateIt($contexte, $date, $timestamp));
            if ($debug) {
              print "WARNING : Intervention $this->id has tags lois corresponding to another section $section2->id";
              print " => Saving to section ".$this->Section->id."\n";
              $debug = 0;
            }
            return $debug;
          }
        }
        else {
          $section1 = Doctrine::getTable('Section')->findOneByContexteOrCreateIt($contexte, $date, $timestamp);
          $this->setSection($section1);
          $section1->setIdDossierInstitution($urls[0]['distinct']);
          $section1->save();
       }
    }
    $this->tagSectionLois($lois);
    return $debug;
  }

  public function setAmendements($tamendements) {
    $tamendements = preg_replace('/[^,\d]+/', '', $tamendements);
    $amends = preg_split('/\s*,\s*/', $tamendements);
    foreach($amends as $amend) {
      $tag = 'loi:amendement='.$amend;
      $this->addTag($tag);
    }
  }

  public function setIntervention($s) {
    $s = str_replace(html_entity_decode('&nbsp;', ENT_COMPAT, "UTF-8"), ' ', $s);
    $this->_set('nb_mots', str_word_count($s));
    return $this->_set('intervention', $s);
  }

  public function getIntervention($args = array()) {
    $intertot = $this->_get('intervention');
    if ($this->type != 'question' && isset($args['linkify_amendements']) && $linko = $args['linkify_amendements']) {
      $intertot = preg_replace('/\(([^\)]+)\)/', '(<i>\\1</i>)', $intertot);
      $interres = '';
      foreach (explode('</p>', $intertot) as $inter) {
       //Repère les amendements (pour les linkifier)
       if (preg_match_all('/(amendements?[,\s]+(identiques?|rédactionnels?|de coordination)?[,\s]*)((n[°os\s]*|([ABICOM]+-)?\s*\d+\s*|,\s*|à\s*|et\s*|rectifié\s*)+)/', $inter, $match)) {
	$lois = implode(',', $this->getTags(array('is_triple' => true,
						  'namespace' => 'loi',
						  'key' => 'numero',
						  'return' => 'value')));
	if ($lois) for ($i = 0 ; $i < count($match[0]) ; $i++) {
	  $match_protected = preg_replace('/(n[°os<\/up>\s]+)?([ABICOM\-]*\d[\d\s\à]*rectifiés?|[ABICOM\-]*\d\d*)(,|(et|à))*/', '%\1\2%\3', $match[3][$i]);
	  if (preg_match_all('/\s*%([^%]+)%(,\s*|\s*et\s*)*/', $match_protected, $amends)) {
	    $replace = $match_protected;
	    foreach($amends[1] as $amend) {
	      $am = preg_replace('/à+/', '-', $amend);
	      $am = strtoupper(preg_replace('/[^\d\-ABICOM]+/', '',$am));
              if ($this->type == 'commission' && !preg_match("/COM/", $am))
                $am = "COM-".$am;
	      $link = str_replace('LLL', urlencode($lois), $linko);
	      $link = str_replace('AAA', urlencode($am), $link);
	      $replace = preg_replace('/%'.$amend.'%/', '<a name="amend_'.$am.'" href="'.$link.'">'.$amend.'</a>', $replace);
	    }
	    $inter = preg_replace('/'.$match[1][$i].$match[3][$i].'/', $match[1][$i].$replace, $inter);
	  }
	}
      }

      //Repère les documents parlementaires (pour les linkifier)
      if (preg_match_all('/(projet|proposition|annexe|rapport|avis)[^<°]*(<i>|\s|\[|\()(n[os°\s<\/up>]+)(([\s,;\w°<i>]{0,5}\W*\d+[\s,\d\(\[\]\-<>i\/]*)+)/i', $inter, $matches)) {
	$match = $matches[4];
	for($i = 0 ; $i < count($match) ; $i++) if (!preg_match('/ (à|du) /', $match[$i]) && !preg_match('/^\D*\d[\d\.]+\d\d\d\D*$/', $match[$i])) {
		$match[$i] = preg_replace('/[, ]+et[, ]+/', ', ', $match[$i]);
        	$matche = explode(';', $match[$i]);
		if (count($matche) == 1 && !preg_match('/\d[,\s\(\(]+\d\d\d\d\D+\d\d\d\d/', $match[$i]))
			$matche = explode(',', $matche[0]);
		$loie = $matche;
		for ($y = 0 ; $y < count($matche) ; $y++) if (preg_match('/\d/', $matche[$y])) {
			if (preg_match('/annexe/', $matches[1][$i]) && $i)
			     $loie[$y] = $oldloi."-".preg_replace('/^\D*(\d+)\D*$/', '\\1', $matche[$y]);
			else $loie[$y] = preg_replace('/\s*(\d+)\D+(\d+)[\s\-]+(\d+)\D*/', '\\2\\3-\\1', $matche[$y]);
	  		if (!preg_match('/\-/', $loie[$y])) {
				$loie[$y] = $this->getSeance()->getSession().'-'.preg_replace('/\D/', '', $loie[$y]);
			}
			$loie[$y] = trim(preg_replace('/<[^>]*>/', '', $loie[$y]));
			if (strlen($loie[$y]) < 10) continue;
			$matche[$y] = preg_replace('/\D/', '.', trim($matche[$y]));
          		$inter = preg_replace('/((n[os\s<\/up>°]*|,|et) *)('.$matche[$y].')/', '\\1<a href="'.url_for('@document?id='.$loie[$y]).'">\\3</a>', $inter);
			$oldloi = $loie[$y];
		}
         }
      }
      $interres .= $inter;
      }
      $intertot = $interres;
    }
    return $intertot;
  }

  public function indexInSolr() {
    $this->getListener()->get("Solr")->addSolrCommand($this);
  }

}
